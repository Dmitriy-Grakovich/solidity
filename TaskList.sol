/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract TaskList {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint8 id = 1;
    struct task {
        string name;
        uint32 timestamp;
        bool tip;   
    }

   

    // Contract can have a `constructor` – function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

    }
    mapping (uint8 => task) taskList;

    
    modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}
   //- добавить задачу (должен в сопоставление заполняться последовательный целочисленный ключ)
    function addTask(string name) public checkOwnerAndAccept{
        taskList[id] = task(name,now,false);
        id = id + 1;
    }

    //- получить количество открытых задач (возвращает число)
    function countOpenTask() public checkOwnerAndAccept returns (uint8){
        uint8 a = 0;

        for(uint8 i = 1; i< id; i++){
            if(taskList[i].timestamp!= uint8(0))
                a++;
            
        }
            return a;
    }

    //- получить список всех задач
    function getlisttask() public checkOwnerAndAccept returns (mapping(uint8 => task)){
        return taskList;
    }

    //- получить описание задачи по ключу
    function taskes(uint8 key_id) public checkOwnerAndAccept returns (string name, uint32 t, bool b){
        require(taskList.exists(key_id), 103);
        return (taskList[key_id].name, taskList[key_id].timestamp, taskList[key_id].tip) ;
    }
    //- удалить задачу по ключу
    function deletetask(uint8 key_id) public checkOwnerAndAccept{
        require(taskList.exists(key_id), 103);
        delete taskList[key_id];
       
    }  

    //- отметить задачу как выполненную по ключу
    function truetask(uint8 key_id) public checkOwnerAndAccept {
        require(taskList.exists(key_id), 103);
        task truetaskes = taskList[key_id];
        truetaskes.tip = true;
        taskList[key_id] = truetaskes;
    }
    
}
